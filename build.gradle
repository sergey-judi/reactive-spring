buildscript {
  repositories {
    mavenCentral()
  }
}

plugins {
  id 'java'
  id 'idea'
  id 'org.springframework.boot' version '2.6.7'
}

group 'tech.pm'
version '1.0-SNAPSHOT'
java.sourceCompatibility = JavaVersion.VERSION_17
java.targetCompatibility = JavaVersion.VERSION_17

repositories {
  mavenCentral()
}

ext {
  springBootVersion = '2.6.7'
  nettyVersion = '4.1.77.Final'
  log4jVersion = '1.7.35'
  lombokVersion = '1.18.22'
  testcontainersVersion = '1.16.3'
}

ext['log4j2.version'] = '2.17.2'

dependencies {
  implementation platform("org.springframework.boot:spring-boot-starter-parent:${springBootVersion}")
  implementation platform("io.netty:netty-bom:${nettyVersion}")

  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-mongodb'

  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-webflux'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-mongodb-reactive'

  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation'

  implementation group: 'org.slf4j', name: 'slf4j-api', version: log4jVersion

  compileOnly group: 'org.projectlombok', name: 'lombok', version: lombokVersion
  annotationProcessor group: 'org.projectlombok', name: 'lombok', version: lombokVersion
  testCompileOnly group: 'org.projectlombok', name: 'lombok', version: lombokVersion
  testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: lombokVersion

  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'
  testImplementation group: 'io.projectreactor', name: 'reactor-test'
  testImplementation group: 'org.testcontainers', name: 'mongodb', version: testcontainersVersion
  testImplementation group: 'org.testcontainers', name: 'junit-jupiter', version: testcontainersVersion
}

test {
  useJUnitPlatform()
}

idea {
  module {
    downloadJavadoc = true
    downloadSources = true
  }
}

task stage(dependsOn: ['bootJar'])

tasks.stage.doLast() {
  delete fileTree(dir: "build/distributions")
  delete fileTree(dir: "build/assetCompile")
  delete fileTree(dir: "build/distributions")
  delete fileTree(dir: "build/libs", exclude: "*.jar") // delete everything except jar file inside build folder
}

jar { // Don't package test folders and files
  exclude "test/**"
  exclude "test/**/**"
}

build.mustRunAfter clean // First clean then build to avoid cache issues etc

gradle.taskGraph.whenReady {
  taskGraph ->
    if (taskGraph.hasTask(stage)) { // Don't run test on heroku
      test.enabled = false
    }
}

bootJar { // Exclude test files when pack boot jar file
  enabled = true
  classifier = 'boot'
  exclude "test/**"
  exclude "test/**/**"
}
